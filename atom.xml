<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ai码</title>
  
  <subtitle>Ai码</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wanik666.github.io/"/>
  <updated>2020-04-09T08:32:02.480Z</updated>
  <id>https://wanik666.github.io/</id>
  
  <author>
    <name>wanik</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot中整合fastjson，自定义jackson、gson</title>
    <link href="https://wanik666.github.io/2020/04/09/SpringBoot/SpringBoot%E4%B8%AD%E6%95%B4%E5%90%88fastjson%EF%BC%8C%E8%87%AA%E5%AE%9A%E4%B9%89jackson%E3%80%81gson/"/>
    <id>https://wanik666.github.io/2020/04/09/SpringBoot/SpringBoot%E4%B8%AD%E6%95%B4%E5%90%88fastjson%EF%BC%8C%E8%87%AA%E5%AE%9A%E4%B9%89jackson%E3%80%81gson/</id>
    <published>2020-04-08T16:00:00.000Z</published>
    <updated>2020-04-09T08:32:02.480Z</updated>
    
    <content type="html"><![CDATA[<p>如今炒的火热的前后端分离项目，大多数开发人员选择RESTful设计风格，Java Web 人员经常要设计 RESTful API，这种设计通常使用 json 数据进行交互。那么前端传入的 json 数据如何序列化成 Java 对象，后端返回的结果又如何将 Java 对象解析成 json 格式数据返回给前端，在整个解析过程，<code>HttpMessageConverter</code> 起到了重要作用，各大公司实现了自己的HttpMessageConverter ，如：</p><ol><li>jackson的<code>MappingJackson2HttpMessageConverter</code>;</li><li>gson的<code>GsonHttpMessageConverter</code>;</li><li>fastjson的<code>FastJsonHttpMessageConverter</code>等等。<a id="more"></a><h4 id="1-自定义jackson"><a href="#1-自定义jackson" class="headerlink" title="1. 自定义jackson"></a>1. 自定义jackson</h4>spring-boot-stater-web依赖的json解析是jackson,同时也为我们进行了jackson的一系列自动化配置，这样我们不需要导入其他json依赖，就可以直接使用，其中起到关键作用的是MappingJackson2HttpMessageConverter;<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="comment">//如果我们自己提供MappingJackson2HttpMessageConverter则不使用Springboot提供的</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(value = MappingJackson2HttpMessageConverter<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class"><span class="title">ignoredType</span> </span>= &#123;</span><br><span class="line"><span class="string">"org.springframework.hateoas.server.mvc.TypeConstrainedMappingJackson2HttpMessageConverter"</span>,</span><br><span class="line"><span class="string">"org.springframework.data.rest.webmvc.alps.AlpsJsonHttpMessageConverter"</span> &#125;)</span><br><span class="line"><span class="function">MappingJackson2HttpMessageConverter <span class="title">mappingJackson2HttpMessageConverter</span><span class="params">(ObjectMapper objectMapper)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MappingJackson2HttpMessageConverter(objectMapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>@ConditionalOnMissingBean(value = MappingJackson2HttpMessageConverter.class,..)注解也告诉我们，如果没有找到自定义的MappingJackson2HttpMessageConverter，将使用下面springboot提供的。<br>如果我们要自定义jackson只需重新定义MappingJackson2HttpMessageConverter，那么springboot提供的将不会生效，自定义方式如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MappingJackson2HttpMessageConverter <span class="title">mappingJackson2HttpMessageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MappingJackson2HttpMessageConverter converter = <span class="keyword">new</span> MappingJackson2HttpMessageConverter();</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//自定义json日期格式</span></span><br><span class="line">        objectMapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>));</span><br><span class="line">        <span class="comment">//其他自定义配置</span></span><br><span class="line">        converter.setObjectMapper(objectMapper);</span><br><span class="line">        <span class="keyword">return</span> converter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-自定义Gson"><a href="#2-自定义Gson" class="headerlink" title="2. 自定义Gson"></a>2. 自定义Gson</h4>由于spring-boot-stater-web已引入jackson，如果要使用gson需将jackson包排除掉，然后引入gson依赖即可，在pom.xml中添加如下配置：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 移除默认的spring-boot-starter-json依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入gson依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>此时我们发现gson依赖并不需要填写版本号，那是因为，springboot也为gson做了一套默认配置，同时管理gson版本，具体可查看spring-boot-dependencies下的pom依赖；<br>同样我们如果要自定义gson配置，只需重新定义GsonHttpMessageConverter即可：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">GsonHttpMessageConverter <span class="title">gsonHttpMessageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    GsonHttpMessageConverter converter = <span class="keyword">new</span> GsonHttpMessageConverter();</span><br><span class="line">    GsonBuilder gsonBuilder = <span class="keyword">new</span> GsonBuilder();</span><br><span class="line">    <span class="comment">//使用GsonBuilder配置日期格式</span></span><br><span class="line">    gsonBuilder.setDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">    <span class="comment">//其他配置</span></span><br><span class="line">    converter.setGson(gsonBuilder.create());</span><br><span class="line">    <span class="keyword">return</span> converter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-整合fastjson"><a href="#3-整合fastjson" class="headerlink" title="3. 整合fastjson"></a>3. 整合fastjson</h4>同样将jackson包排除掉，然后引入fastjson依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 移除默认的spring-boot-starter-json依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入fastjson依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.58<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>fastjson与jackson和gson略有不同，springboot没有提供fastjson的自动化配置，所以，就需要我们手动提供fastjson配置，如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">FastJsonHttpMessageConverter <span class="title">fastJsonHttpMessageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FastJsonHttpMessageConverter converter = <span class="keyword">new</span> FastJsonHttpMessageConverter();</span><br><span class="line">    FastJsonConfig config = <span class="keyword">new</span> FastJsonConfig();</span><br><span class="line">    <span class="comment">//配置日期格式</span></span><br><span class="line">    config.setDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">    <span class="comment">//其他配置</span></span><br><span class="line">    converter.setFastJsonConfig(config);</span><br><span class="line">    <span class="keyword">return</span> converter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如今炒的火热的前后端分离项目，大多数开发人员选择RESTful设计风格，Java Web 人员经常要设计 RESTful API，这种设计通常使用 json 数据进行交互。那么前端传入的 json 数据如何序列化成 Java 对象，后端返回的结果又如何将 Java 对象解析成 json 格式数据返回给前端，在整个解析过程，&lt;code&gt;HttpMessageConverter&lt;/code&gt; 起到了重要作用，各大公司实现了自己的HttpMessageConverter ，如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;jackson的&lt;code&gt;MappingJackson2HttpMessageConverter&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;gson的&lt;code&gt;GsonHttpMessageConverter&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;fastjson的&lt;code&gt;FastJsonHttpMessageConverter&lt;/code&gt;等等。
    
    </summary>
    
    
      <category term="springboot" scheme="https://wanik666.github.io/categories/springboot/"/>
    
    
      <category term="SpringBoot" scheme="https://wanik666.github.io/tags/SpringBoot/"/>
    
      <category term="json" scheme="https://wanik666.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>对比Spring和Spring Boot中properties文件不同处理方式</title>
    <link href="https://wanik666.github.io/2020/04/08/SpringBoot/%E5%AF%B9%E6%AF%94Spring%E5%92%8CSpring%20Boot%E4%B8%ADproperties%E6%96%87%E4%BB%B6%E4%B8%8D%E5%90%8C%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/"/>
    <id>https://wanik666.github.io/2020/04/08/SpringBoot/%E5%AF%B9%E6%AF%94Spring%E5%92%8CSpring%20Boot%E4%B8%ADproperties%E6%96%87%E4%BB%B6%E4%B8%8D%E5%90%8C%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/</id>
    <published>2020-04-07T16:00:00.000Z</published>
    <updated>2020-04-08T09:23:12.293Z</updated>
    
    <content type="html"><![CDATA[<p>项目中我们总避免不了使用<code>properties</code>文件定义一些配置属性，然后将这些配置注入到对应属性上让其生效，那么<code>Spring</code>中和<code>Spring Boot</code>对properties处理有什么差别呢？那就一起来看看。</p><a id="more"></a><p><strong>注意：</strong><br><strong>本文创建一个简单的SpringBoot项目，分别使用两种方式来演示</strong></p><h3 id="1-Spring中properties属性注入"><a href="#1-Spring中properties属性注入" class="headerlink" title="1. Spring中properties属性注入"></a>1. Spring中properties属性注入</h3><h4 id="1-1-配置属性值到application-properties中"><a href="#1-1-配置属性值到application-properties中" class="headerlink" title="1.1 配置属性值到application.properties中"></a>1.1 配置属性值到application.properties中</h4><h6 id="1-1-1-创建实体类User-java"><a href="#1-1-1-创建实体类User-java" class="headerlink" title="1.1.1 创建实体类User.java"></a>1.1.1 创建实体类User.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"><span class="comment">//省略getter和setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="1-1-2-将属性值配置在application-properties"><a href="#1-1-2-将属性值配置在application-properties" class="headerlink" title="1.1.2 将属性值配置在application.properties"></a>1.1.2 将属性值配置在application.properties</h6><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application.properties配置文件会在项目启动时就加载到Spring容器</span></span><br><span class="line"><span class="meta">user.id</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">user.name</span>=<span class="string">wanik</span></span><br><span class="line"><span class="meta">user.address</span>=<span class="string">beijing</span></span><br></pre></td></tr></table></figure><h5 id="1-1-3-注入属性到User"><a href="#1-1-3-注入属性到User" class="headerlink" title="1.1.3 注入属性到User"></a>1.1.3 注入属性到User</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>  <span class="comment">//将该bean添加到Spring容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//application.properties配置文件会在项目启动时就加载到Spring容器</span></span><br><span class="line">    <span class="comment">//这里我们可以直接使用@Value("$&#123;key&#125;")注解将properties中的值注入到指定属性</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;user.id&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;user.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;user.address&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//省略getter/setter方法，必须存在setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-1-4-测试"><a href="#1-1-4-测试" class="headerlink" title="1.1.4 测试"></a>1.1.4 测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SpringBoot测试类</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PropertiesApplicationTests</span> </span>&#123;</span><br><span class="line"><span class="comment">//注入User对象到测试类</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果：<br><img src="https://img-blog.csdnimg.cn/20200408143342698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDE4NDA3,size_16,color_FFFFFF,t_70" alt="获取成功"></p><h4 id="1-2-定义外部配置文件user-properties"><a href="#1-2-定义外部配置文件user-properties" class="headerlink" title="1.2 定义外部配置文件user.properties"></a>1.2 定义外部配置文件user.properties</h4><p><img src="https://img-blog.csdnimg.cn/20200408143652514.png" alt="user.properties"><br>在外部自定义properties文件也是我们常用的一种方式，比如db.properties等，那么这个文件在项目启动时不会被自动加载到Spring容器中，那么我们就要通过修改上述要注入的User实现。</p><p><strong>通过@PropertySource(path)注解指定properties文件路径</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>  <span class="comment">//将该bean添加到Spring容器中</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:user.properties"</span>)<span class="comment">//指定properties文件路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//application.properties配置文件会在项目启动时就加载到Spring容器</span></span><br><span class="line">    <span class="comment">//这里我们可以直接使用@Value("$&#123;key&#125;")注解将properties中的值注入到指定属性</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;user.id&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;user.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;user.address&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"><span class="comment">//省略getter、setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：<br>第二种方式测试成功<br><img src="https://img-blog.csdnimg.cn/20200408144506636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDE4NDA3,size_16,color_FFFFFF,t_70" alt="测试成功"><br>上述介绍两种在Spring中注入properties方式，这两种方式同样在SpringBoot中适用，下面介绍Spring Boot中提供的另一种方式</p><h3 id="2-Spring-Boot中properties属性注入"><a href="#2-Spring-Boot中properties属性注入" class="headerlink" title="2. Spring Boot中properties属性注入"></a>2. Spring Boot中properties属性注入</h3><p>Spring Boot提供了一种属性安全的注入方式,在属性值较多时这种方式非常简便，省略掉在每个属性上一对一通过@Value进行注入：<br>同样修改上述User类，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>  <span class="comment">//将该bean添加到Spring容器中</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:user.properties"</span>)</span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@Value("$&#123;user.id&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">//@Value("$&#123;user.name&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//@Value("$&#123;user.address&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"><span class="comment">//省略getter/setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>注意：</code>这种方式只适用于properties文件注入，<code>yaml</code>或<code>yml</code>类型不适用。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中我们总避免不了使用&lt;code&gt;properties&lt;/code&gt;文件定义一些配置属性，然后将这些配置注入到对应属性上让其生效，那么&lt;code&gt;Spring&lt;/code&gt;中和&lt;code&gt;Spring Boot&lt;/code&gt;对properties处理有什么差别呢？那就一起来看看。&lt;/p&gt;
    
    </summary>
    
    
      <category term="springboot" scheme="https://wanik666.github.io/categories/springboot/"/>
    
    
      <category term="SpringBoot" scheme="https://wanik666.github.io/tags/SpringBoot/"/>
    
      <category term="Spring" scheme="https://wanik666.github.io/tags/Spring/"/>
    
      <category term="properties" scheme="https://wanik666.github.io/tags/properties/"/>
    
  </entry>
  
  <entry>
    <title>创建SpringBoot项目的三种姿势，你掌握几个？</title>
    <link href="https://wanik666.github.io/2020/04/07/SpringBoot/%E5%88%9B%E5%BB%BASpringBoot%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%89%E7%A7%8D%E5%A7%BF%E5%8A%BF%EF%BC%8C%E4%BD%A0%E9%83%BD%E7%9F%A5%E9%81%93%E5%90%97/"/>
    <id>https://wanik666.github.io/2020/04/07/SpringBoot/%E5%88%9B%E5%BB%BASpringBoot%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%89%E7%A7%8D%E5%A7%BF%E5%8A%BF%EF%BC%8C%E4%BD%A0%E9%83%BD%E7%9F%A5%E9%81%93%E5%90%97/</id>
    <published>2020-04-06T16:00:00.000Z</published>
    <updated>2020-04-08T09:23:12.292Z</updated>
    
    <content type="html"><![CDATA[<p>在传统的SSM项目中，我们前期工作总是大量操作XML配置文件，而且有时候项目出现问题，经常找不到原因出在哪里，可能是代码逻辑问题、或者是XML配置不正确，给我们开发人员带来不少困扰，<a href="https://spring.io/projects/spring-boot">SpringBoot</a>的出现极大的减少了开发人员的大量工作<a id="more"></a>，如：</p><blockquote><ol><li>Create stand-alone Spring applications<br><code>创建一个独立启动的Spring应用</code></li><li>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)<br><code>内嵌Tomcat，Jetty或Undertow（无需部署WAR文件）</code></li><li>Provide opinionated ‘starter’ dependencies to simplify your build configuration<br><code>使用官方提供‘starter’依赖可以减少你项目构建所需配置</code></li><li>Automatically configure Spring and 3rd party libraries whenever possible<br><code>尽可能自动配置Spring和第三方库</code></li><li>Provide production-ready features such as metrics, health checks, and externalized configuration<br><code>提供可用于生产的功能，例如指标，运行状况检查和外部化配置</code></li><li>Absolutely no code generation and no requirement for XML configuration<br><code>完全没有代码生成，也不需要XML配置</code></li></ol></blockquote><p>以上就是对于SpringBoot的简单了解，好不好用，用了才知道。接下来介绍创建SpringBoot项目的三种方式</p><h3 id="1-使用官方提供的构建方式"><a href="#1-使用官方提供的构建方式" class="headerlink" title="1. 使用官方提供的构建方式"></a>1. 使用官方提供的构建方式</h3><p><strong>1.1 点击进入到官方的<a href="https://start.spring.io/">Spring Initializr</a>,如下界面</strong><br><img src="https://ae01.alicdn.com/kf/H7b6757eae8f0488a998fb70da162e7acb.png" alt="官方构建界面1"><br><img src="https://ae01.alicdn.com/kf/Hb98bc0a5e0da4a7bb16b60e703f7ed78a.png" alt="官方构建界面2"><br><strong>1.2 填写所需信息后，点击<code>GENERATE</code>,    此时就会下载一个压缩文件到本地，我们将该文件解压缩，然后用IDE打开即可</strong><br><img src="https://ae01.alicdn.com/kf/H19f7ec75571c4869912770fbd3677d54o.png" alt="解压缩"><br><strong>1.3 解压缩完成后，打开IDE工具，这里使用的是IntelliJ IDEA,点击<code>Open</code>,选择解压后文件打开，如下：</strong><br><img src="https://ae01.alicdn.com/kf/H692d87512ef44616af1636981880d9cey.png" alt="Open"><br><strong>1.4打开成功后，我们的第一个SpringBoot项目就创建完成了。</strong></p><h3 id="2-使用IDE-IntelliJ-IDEA-构建"><a href="#2-使用IDE-IntelliJ-IDEA-构建" class="headerlink" title="2. 使用IDE(IntelliJ IDEA)构建"></a>2. 使用IDE(IntelliJ IDEA)构建</h3><p><strong>2.1 我们打开IntelliJ IDEA,点击<code>Create New Project</code></strong><br><img src="https://ae01.alicdn.com/kf/Hc309b668174e40f3b8bf63e463d74d99Q.png" alt="Create New Project"><br><strong>2.2 选择<code>Spring Initializr</code>,选择SDK,构建方式使用官方提供方式，选择完成后点击<code>Next</code></strong><br><img src="https://ae01.alicdn.com/kf/Hb09166566c74478eb73e7c89139fe292o.png" alt="Spring Initializr"><br><strong>2.3 填写方式同官方方式,填写完成后，点击<code>Next</code>：</strong><br><img src="https://ae01.alicdn.com/kf/H45aa02577e744d67b57a5935b2099561y.png" alt="填写信息"><br><strong>2.4 选择所需依赖，然后<code>Next</code>，最后<code>Finish</code>,项目就创建成功了</strong><br><img src="https://ae01.alicdn.com/kf/Hf27127616a454526a3e04bef76fbec90a.png" alt="选择依赖"></p><h3 id="3-通过改造一个Maven项目"><a href="#3-通过改造一个Maven项目" class="headerlink" title="3. 通过改造一个Maven项目"></a>3. 通过改造一个Maven项目</h3><p><strong>3.1 我们打开IntelliJ IDEA,点击<code>Create New Project</code>，选择<code>Maven</code>，然后点击<code>Next</code></strong><br><img src="https://ae01.alicdn.com/kf/Hfaa71b94854146d1a161b1f5e2bd0ce4C.png" alt="Maven"><br><strong>3.2 填写GroupId等信息，点击<code>Next</code>，最后<code>Finish</code></strong><br><img src="https://ae01.alicdn.com/kf/H07e1d99c0d494adfb2785ff7137b8d95m.png" alt="填写信息"><br><strong>3.3 上面步骤结束后，Maven项目创建成功，接下来我们进行改造</strong><br>打开pom.xml文件，添加如下配置到<code>&amp;lt;project&amp;gt;&amp;lt;/project&amp;gt;</code>节点下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加完成后我们还需添加一个启动类，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot3Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Springboot3Application<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，Maven方式就创建完成了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在传统的SSM项目中，我们前期工作总是大量操作XML配置文件，而且有时候项目出现问题，经常找不到原因出在哪里，可能是代码逻辑问题、或者是XML配置不正确，给我们开发人员带来不少困扰，&lt;a href=&quot;https://spring.io/projects/spring-boot&quot;&gt;SpringBoot&lt;/a&gt;的出现极大的减少了开发人员的大量工作
    
    </summary>
    
    
      <category term="springboot" scheme="https://wanik666.github.io/categories/springboot/"/>
    
    
      <category term="SpringBoot" scheme="https://wanik666.github.io/tags/SpringBoot/"/>
    
      <category term="Spring" scheme="https://wanik666.github.io/tags/Spring/"/>
    
      <category term="Maven" scheme="https://wanik666.github.io/tags/Maven/"/>
    
      <category term="IntelliJ IDEA" scheme="https://wanik666.github.io/tags/IntelliJ-IDEA/"/>
    
      <category term="IDE" scheme="https://wanik666.github.io/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>一款在线免费图床推荐</title>
    <link href="https://wanik666.github.io/2020/04/06/%E4%B8%80%E6%AC%BE%E5%9C%A8%E7%BA%BF%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A%E6%8E%A8%E8%8D%90/"/>
    <id>https://wanik666.github.io/2020/04/06/%E4%B8%80%E6%AC%BE%E5%9C%A8%E7%BA%BF%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A%E6%8E%A8%E8%8D%90/</id>
    <published>2020-04-05T16:00:00.000Z</published>
    <updated>2020-04-08T09:23:12.291Z</updated>
    
    <content type="html"><![CDATA[<p>现在很多人有了自己的博客/论坛，在写作过程中难免会插入一些配图，通常会因为图床问题焦躁，要么图片加载速度慢、要么连接过期了，总之就是各种问题频发，那么今天就介绍一款免费图床<a href="https://images.ac.cn/"> Potato </a>，这款图床无需注册、不限容量、永久存储。</p><a id="more"></a><blockquote><p><a href="https://images.ac.cn/">“ Potato ”</a>是根据新浪图床API接口开发的免费图床程序，拥有网站和安卓APP两个形态。</p></blockquote><p>每张图片文件最大2MB,支持每次最多同时上传10个文件<br>集成了阿里图床、Upload_Cc、小米、Catbox、掘金论坛等多节点上传<br>无需注册、永久免费、不限容量、永久存储</p><h4 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h4><p>主界面预览<br><img src="https://ae01.alicdn.com/kf/H752881e588a34e53a5f3c8c41c85f08b0.png" alt="土豆图床"></p><h4 id="可以直接粘贴或拖拽图片至上传区，或点击右下角进行选择本地图片上传"><a href="#可以直接粘贴或拖拽图片至上传区，或点击右下角进行选择本地图片上传" class="headerlink" title="可以直接粘贴或拖拽图片至上传区，或点击右下角进行选择本地图片上传"></a>可以直接粘贴或拖拽图片至上传区，或点击右下角进行选择本地图片上传</h4><p><img src="https://ae01.alicdn.com/kf/Hf1fcd27ae528439fa28062e73b295ba0e.png" alt="土豆图床"></p><h4 id="上传成功"><a href="#上传成功" class="headerlink" title="上传成功"></a>上传成功</h4><p><img src="https://ae01.alicdn.com/kf/H752881e588a34e53a5f3c8c41c85f08b0.png" alt="上传成功"><br>上传成功后，可根据自己需求选择图片插入方式进行代码/链接复制进行使用<br><img src="https://ae01.alicdn.com/kf/He3f7a160114d4c018c5047277235efa5B.png" alt="选择"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在很多人有了自己的博客/论坛，在写作过程中难免会插入一些配图，通常会因为图床问题焦躁，要么图片加载速度慢、要么连接过期了，总之就是各种问题频发，那么今天就介绍一款免费图床&lt;a href=&quot;https://images.ac.cn/&quot;&gt; Potato &lt;/a&gt;，这款图床无需注册、不限容量、永久存储。&lt;/p&gt;
    
    </summary>
    
    
      <category term="推荐工具" scheme="https://wanik666.github.io/categories/%E6%8E%A8%E8%8D%90%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="图床" scheme="https://wanik666.github.io/tags/%E5%9B%BE%E5%BA%8A/"/>
    
      <category term="工具" scheme="https://wanik666.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="tools" scheme="https://wanik666.github.io/tags/tools/"/>
    
  </entry>
  
</feed>
